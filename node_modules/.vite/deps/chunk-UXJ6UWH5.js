import {
  BuildEnvironment,
  DEFAULT_CLIENT_CONDITIONS,
  DEFAULT_CLIENT_MAIN_FIELDS,
  DEFAULT_EXTERNAL_CONDITIONS,
  DEFAULT_SERVER_CONDITIONS,
  DEFAULT_SERVER_MAIN_FIELDS,
  DevEnvironment,
  VERSION,
  build$1,
  buildErrorMessage,
  createBuilder,
  createFilter,
  createIdResolver,
  createLogger,
  createRunnableDevEnvironment,
  createServer$2,
  createServerHotChannel,
  createServerModuleRunner,
  createServerModuleRunnerTransport,
  defaultAllowedOrigins,
  defineConfig,
  fetchModule,
  formatPostcssSourceMap,
  isCSSRequest,
  isFileLoadingAllowed,
  isFileServingAllowed,
  isRunnableDevEnvironment,
  loadConfigFromFile,
  loadEnv,
  mergeAlias,
  mergeConfig,
  normalizePath,
  optimizeDeps,
  perEnvironmentPlugin,
  perEnvironmentState,
  preprocessCSS,
  preview,
  require_main,
  resolveConfig,
  resolveEnvPrefix,
  rollupVersion,
  runnerImport,
  searchForWorkspaceRoot,
  send,
  sortUserPlugins,
  ssrTransform,
  transformWithEsbuild
} from "./chunk-STHNFSW4.js";
import {
  parseAst,
  parseAstAsync
} from "./chunk-H6GFD3UG.js";
import {
  __export,
  __toESM
} from "./chunk-PR4QN5HX.js";

// node_modules/vite/dist/node/index.js
var node_exports = {};
__export(node_exports, {
  BuildEnvironment: () => BuildEnvironment,
  DevEnvironment: () => DevEnvironment,
  build: () => build$1,
  buildErrorMessage: () => buildErrorMessage,
  createBuilder: () => createBuilder,
  createFetchableDevEnvironment: () => createFetchableDevEnvironment,
  createFilter: () => createFilter,
  createIdResolver: () => createIdResolver,
  createLogger: () => createLogger,
  createRunnableDevEnvironment: () => createRunnableDevEnvironment,
  createServer: () => createServer$2,
  createServerHotChannel: () => createServerHotChannel,
  createServerModuleRunner: () => createServerModuleRunner,
  createServerModuleRunnerTransport: () => createServerModuleRunnerTransport,
  defaultAllowedOrigins: () => defaultAllowedOrigins,
  defaultClientConditions: () => DEFAULT_CLIENT_CONDITIONS,
  defaultClientMainFields: () => DEFAULT_CLIENT_MAIN_FIELDS,
  defaultExternalConditions: () => DEFAULT_EXTERNAL_CONDITIONS,
  defaultServerConditions: () => DEFAULT_SERVER_CONDITIONS,
  defaultServerMainFields: () => DEFAULT_SERVER_MAIN_FIELDS,
  defineConfig: () => defineConfig,
  esbuildVersion: () => import_esbuild.version,
  fetchModule: () => fetchModule,
  formatPostcssSourceMap: () => formatPostcssSourceMap,
  isCSSRequest: () => isCSSRequest,
  isFetchableDevEnvironment: () => isFetchableDevEnvironment,
  isFileLoadingAllowed: () => isFileLoadingAllowed,
  isFileServingAllowed: () => isFileServingAllowed,
  isRunnableDevEnvironment: () => isRunnableDevEnvironment,
  loadConfigFromFile: () => loadConfigFromFile,
  loadEnv: () => loadEnv,
  mergeAlias: () => mergeAlias,
  mergeConfig: () => mergeConfig,
  moduleRunnerTransform: () => ssrTransform,
  normalizePath: () => normalizePath,
  optimizeDeps: () => optimizeDeps,
  parseAst: () => parseAst,
  parseAstAsync: () => parseAstAsync,
  perEnvironmentPlugin: () => perEnvironmentPlugin,
  perEnvironmentState: () => perEnvironmentState,
  preprocessCSS: () => preprocessCSS,
  preview: () => preview,
  resolveConfig: () => resolveConfig,
  resolveEnvPrefix: () => resolveEnvPrefix,
  rollupVersion: () => rollupVersion,
  runnerImport: () => runnerImport,
  searchForWorkspaceRoot: () => searchForWorkspaceRoot,
  send: () => send,
  sortUserPlugins: () => sortUserPlugins,
  transformWithEsbuild: () => transformWithEsbuild,
  version: () => VERSION
});
var import_esbuild = __toESM(require_main());
function createFetchableDevEnvironment(name, config, context) {
  if (typeof Request === "undefined" || typeof Response === "undefined") throw new TypeError("FetchableDevEnvironment requires a global `Request` and `Response` object.");
  if (!context.handleRequest) throw new TypeError("FetchableDevEnvironment requires a `handleRequest` method during initialisation.");
  return new FetchableDevEnvironment(name, config, context);
}
function isFetchableDevEnvironment(environment) {
  return environment instanceof FetchableDevEnvironment;
}
var FetchableDevEnvironment = class extends DevEnvironment {
  _handleRequest;
  constructor(name, config, context) {
    super(name, config, context);
    this._handleRequest = context.handleRequest;
  }
  async dispatchFetch(request) {
    if (!(request instanceof Request)) throw new TypeError("FetchableDevEnvironment `dispatchFetch` must receive a `Request` object.");
    const response = await this._handleRequest(request);
    if (!(response instanceof Response)) throw new TypeError("FetchableDevEnvironment `context.handleRequest` must return a `Response` object.");
    return response;
  }
};

export {
  import_esbuild,
  createFetchableDevEnvironment,
  isFetchableDevEnvironment,
  node_exports
};
//# sourceMappingURL=chunk-UXJ6UWH5.js.map
